user nginx;
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;

    log_format customlog1 '$private_addr - [$time_local] $connection $connection_requests $status $request $status $http_referer $http_user_agent $host $request_body';

    server_name_in_redirect off;
    server_tokens off;
    port_in_redirect off;
    disable_symlinks on;

    # for the sake of user privacy, do not remove this
    map $remote_addr $private_addr {
        ~(?P<ip>\d+\.\d+\.\d+)\. 127.0.0.1;
        ~(?P<ip>[^:]+:[^:]+): 0:0:0:0:0:0:0:1;
        default 0.0.0.0;
    }

    # blacklist.conf - block known bad hosts from list
    include blacklist.conf;

    # redirect www to non-www
    server {
        listen IP-ADDRESS-PLACEHOLDER:80;
        server_name www.DOMAIN-TLD-PLACEHOLDER;
        rewrite ^(.*) https://DOMAIN-TLD-PLACEHOLDER permanent;

        # redirect letsencrypt to dehydrated
        location ^~ /.well-known/acme-challenge {
            auth_basic "off";
            alias /var/www/dehydrated;
        }
    }

    # redirect www-ssl to non-www-ssl
    server {
            listen IP-ADDRESS-PLACEHOLDER:443 ssl;
            ssl_certificate /etc/letsencrypt/live/DOMAIN-TLD-PLACEHOLDER/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/DOMAIN-TLD-PLACEHOLDER/privkey.pem;
            ssl_trusted_certificate /etc/letsencrypt/live/DOMAIN-TLD-PLACEHOLDER/fullchain.pem;

            server_name www.DOMAIN-TLD-PLACEHOLDER;
            rewrite ^(.*) https://DOMAIN-TLD-PLACEHOLDER permanent;
    }

    # main page non-ssl
    server {
            listen IP-ADDRESS-PLACEHOLDER:80;
            charset utf-8;

            server_name DOMAIN-TLD-PLACEHOLDER;
            return 301 https://$host$request_uri;
    }

    # main page ssl
    server {
            listen IP-ADDRESS-PLACEHOLDER:443 ssl;
            ssl_certificate /etc/letsencrypt/live/DOMAIN-TLD-PLACEHOLDER/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/DOMAIN-TLD-PLACEHOLDER/privkey.pem;
            ssl_trusted_certificate /etc/letsencrypt/live/DOMAIN-TLD-PLACEHOLDER/fullchain.pem;

            # for the sake of privacy, use logs only for debugging problems 
            #error_log /var/log/nginx/DOMAIN-TLD-PLACEHOLDER.error_log warn;
            #access_log /var/log/nginx/DOMAIN-TLD-PLACEHOLDER.access_log main;

            server_name DOMAIN-TLD-PLACEHOLDER;

            client_body_timeout 15s;
            client_header_timeout 15s;
            keepalive_timeout 30s;
            send_timeout 45s;
            client_max_body_size 256K;

            location / {
                index index.php index.html;
                root /var/www/sites/DOMAIN-TLD-PLACEHOLDER;
            }
    }

    # tor2web non-ssl
    server {
        listen IP-ADDRESS-PLACEHOLDER:80;
        charset utf-8;

        server_name *.DOMAIN-TLD-PLACEHOLDER;
        return 301 https://$host$request_uri;

        location / {
            if ($host ~* (.*).DOMAIN-TLD-PLACEHOLDER) {
                set $server_id $1;
            }

            set $hostreq "${host}${request_uri}";

            if ($hostreq ~* x.DOMAIN-TLD-PLACEHOLDER/([^/]+)(/.*)) {
                set $server_id $1;
                rewrite ^/[^/]+(/.*)$ $1 break;
            }

            proxy_pass http://127.0.0.1:8081;

            proxy_set_header Host $server_id.DOMAIN-TLD-PLACEHOLDER;
            proxy_set_header Accept-Encoding "";
            proxy_set_header X-real-IP $private_addr;
            proxy_set_header X-Forwarded-For $private_addr;

            proxy_connect_timeout 300;
            proxy_send_timeout 300;
            proxy_read_timeout 300;
            send_timeout 300;

            proxy_redirect http://$server_id.DOMAIN-TLD-PLACEHOLDER http://$server_id.DOMAIN-TLD-PLACEHOLDER;
            proxy_redirect http://$server_id.DOMAIN-TLD-PLACEHOLDER http://$server_id;
            proxy_redirect http://$server_id.DOMAIN-TLD-PLACEHOLDER http://$server_id.onion;
        }
    }

    # tor2web ssl
    server {
        listen IP-ADDRESS-PLACEHOLDER:443 ssl;

        ssl_certificate /etc/letsencrypt/live/DOMAIN-TLD-PLACEHOLDER/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/DOMAIN-TLD-PLACEHOLDER/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/DOMAIN-TLD-PLACEHOLDER/fullchain.pem;

        charset utf-8;

        # we do not want to log ips
        #error_log /var/log/nginx/DOMAIN-TLD-PLACEHOLDER.error_log warn;
        #access_log /var/log/nginx/DOMAIN-TLD-PLACEHOLDER.access_log customlog1;

        server_name *.DOMAIN-TLD-PLACEHOLDER;

        # timeouts
        client_body_timeout 15s;
        client_header_timeout 15s;
        keepalive_timeout 30s;
        send_timeout 45s;
        client_max_body_size 5M;

        error_page 403 /403.html;

        replace_filter "\.onion" ".DOMAIN-TLD-PLACEHOLDER" gi;

        location /403.html {
            root /var/www/sites/DOMAIN-TLD-PLACEHOLDER;
            allow all;
        }

        location / {
            if ($bad_host) {
               return 403;
            }

            location ~* \.(exe|cmd|bat|msi)$ {
                deny all;
            }

            if ($host ~* (.*).DOMAIN-TLD-PLACEHOLDER) {
                set $server_id $1;
            }

            proxy_pass http://127.0.0.1:8081/;

            proxy_set_header Accept-Encoding "";
            proxy_set_header X-real-IP $private_addr;
            proxy_set_header Host "$server_id.onion";
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Custom-Referrer "$server_id.onion";

            proxy_connect_timeout 300;
            proxy_send_timeout 300;
            proxy_read_timeout 300;
            send_timeout 300;

            proxy_redirect http://$server_id.DOMAIN-TLD-PLACEHOLDER http://$server_id.DOMAIN-TLD-PLACEHOLDER;
            proxy_redirect http://$server_id.DOMAIN-TLD-PLACEHOLDER http://$server_id;
            proxy_redirect http://$server_id.DOMAIN-TLD-PLACEHOLDER http://$server_id.onion;
            proxy_redirect https://$server_id.DOMAIN-TLD-PLACEHOLDER https://$server_id.DOMAIN-TLD-PLACEHOLDER;
            proxy_redirect https://$server_id.DOMAIN-TLD-PLACEHOLDER https://$server_id;
            proxy_redirect https://$server_id.DOMAIN-TLD-PLACEHOLDER https://$server_id.onion;
        }
    }
}
